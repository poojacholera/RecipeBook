{"version":3,"sources":["CSS/Recipe.module.css","CSS/RecipeView.module.css","CSS/FruitsAndVeg.module.css","CSS/navmenu.module.css","navmenu.jsx","Recipe.jsx","RecipeView.jsx","CountDisplayContainer.jsx","LineChartContainer.jsx","CountryChart.jsx","CoronaInfo.jsx","home.jsx","FruitsAndVeg.jsx","App.js","index.js","CSS/CoronaInfo.module.css"],"names":["module","exports","recipe","image","title","AppHeader","searchForm","searchBar","searchButton","recipes","navbar","headerText","whiteText","Navmenu","react_default","a","createElement","Fragment","Navbar","className","styles","Brand","href","Toggle","aria-controls","Collapse","id","Nav","Link","react_router_dom","exact","to","Component","Recipe","_ref","calories","ingredients","for","toFixed","src","alt","map","ingredient","text","RecipeView","_useState","useState","_useState2","Object","slicedToArray","setRecipes","_useState3","_useState4","search","setSearch","_useState5","_useState6","query","setQuery","useEffect","getRecipes","asyncToGenerator","regenerator_default","mark","_callee","response","data","wrap","_context","prev","next","fetch","concat","sent","json","hits","stop","apply","this","arguments","onSubmit","e","preventDefault","type","value","onChange","target","src_Recipe","label","CountDisplayContainer","heading","data0","data1","data2","labels","Container","counterDisplayContainer","Row","Col","cardHeadingContainer","cardHeading","Card","cardViews","Body","cardBox","digits","numberWithCommas","cardLabel","x","n","String","p","indexOf","replace","m","i","CountryChart","props","lastDate","setLastDate","setProvince","_useState7","_useState8","setConfirmedCasesData","_useState9","_useState10","setActiveCasesData","_useState11","_useState12","setDeathData","_useState13","_useState14","chartRef","React","createRef","console","log","JSON","stringify","provinceList","li","getDataset1","loadLineChart","filter","today","Date","currentMonth","parseInt","getMonth","currentDate","getDate","dateFormat","dateFormatMonth","dateFormatDate","dt","getFullYear","dtMonth","dtDate","Cases","Province","substr","date","cases","confirmed","Confirmed","active","Active","deaths","Deaths","country","Country","province","toString","getMonthMMM","toConsumableArray","Set","ctx","current","getContext","Chart","datasets","backgroundColor","options","responsive","scales","yAxes","ticks","beginAtZero","plugins","filler","propagate","style","color","ref","width","height","obj","CoronaInfo","globalData","setGlobalData","countriesData","setCountriesData","dayOneData","setDayOneData","setProvinceList","countryList","setCountryList","_React$useState","_React$useState2","selectCountry","setSelectCountry","API_DayOne","getTotalGlobalCount","getCountryList","then","res","Global","Countries","_ref2","_callee2","_context2","onCountrySelect","_ref3","_callee3","c","selectedObj","_context3","CountryCode","abrupt","_x","getCountByDayOne","_ref4","_callee4","val","list","_context4","getProvinceList","_x2","item","countryOptions","ISO2","newsInfo","onLoad","src_CountDisplayContainer","TotalConfirmed","TotalRecovered","TotalDeaths","Select","event","Slug","src_CountryChart","Home","fontFamily","FruitsAndVeg","information","getInfo","myurl","params","URL","tfvitem","URLSearchParams","error","parseJSON","ok","message","statusText","Promise","reject","results","package","description","catch","parse","App","navmenu","react_router","path","component","ReactDOM","render","basename","process","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.321981c6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"recipe\":\"Recipe_recipe__3DkKg\",\"image\":\"Recipe_image__3R8xD\",\"title\":\"Recipe_title__2muBm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"AppHeader\":\"RecipeView_AppHeader__ct-vo\",\"searchForm\":\"RecipeView_searchForm__2UyJX\",\"searchBar\":\"RecipeView_searchBar__159Su\",\"searchButton\":\"RecipeView_searchButton__3N6nb\",\"recipes\":\"RecipeView_recipes__235iL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"recipe\":\"FruitsAndVeg_recipe__3EZfO\",\"image\":\"FruitsAndVeg_image__3U8Cp\",\"title\":\"FruitsAndVeg_title__302bN\",\"AppHeader\":\"FruitsAndVeg_AppHeader__1DPKm\",\"searchForm\":\"FruitsAndVeg_searchForm__39SbN\",\"searchBar\":\"FruitsAndVeg_searchBar__3J8Cr\",\"searchButton\":\"FruitsAndVeg_searchButton__3DyS0\",\"recipes\":\"FruitsAndVeg_recipes__2JxZ1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navbar\":\"navmenu_navbar__1hhKl\",\"headerText\":\"navmenu_headerText__1kdRe\",\"whiteText\":\"navmenu_whiteText__2AwIV\"};","import React,{Component} from 'react';\nimport Navbar from \"react-bootstrap/Navbar\";\nimport Nav from \"react-bootstrap/Nav\";\nimport NavDropdown from \"react-bootstrap/NavDropdown\";\nimport styles from \"./CSS/navmenu.module.css\";\nimport { Link } from 'react-router-dom'\n\n\nclass Navmenu extends Component {\n    render() {\n        return (\n            <React.Fragment>\n                <Navbar className={styles.navbar} >\n                    <Navbar.Brand href=\"#home\"><h2 className={styles.headerText}>Pooja</h2></Navbar.Brand>\n                    <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n                    <Navbar.Collapse id=\"basic-navbar-nav\">\n                        <Nav  className=\"mr-auto\">\n                            <Nav.Link ><Link className=\"text-white\" exact to='/'>Home</Link></Nav.Link>\n                            <Nav.Link ><Link className=\"text-white\" to='/Recipes'>Recipes</Link></Nav.Link>\n                            <Nav.Link ><Link className=\"text-white\" to='/CoronaInfo'>Corona-Info</Link></Nav.Link>\n                            <Nav.Link ><Link className=\"text-white\" to='/FruitsAndVeg'>Know your Food</Link></Nav.Link>\n                           {/* <NavDropdown className=\"text-white\"  className={styles.whiteText}title=\"Dropdown\" id=\"basic-nav-dropdown\">\n                                <NavDropdown.Item className=\"text-white\" href=\"#action/3.1\">Action</NavDropdown.Item>\n                                <NavDropdown.Item className=\"text-white\" href=\"#action/3.2\">Another action</NavDropdown.Item>\n                                <NavDropdown.Item className=\"text-white\" href=\"#action/3.3\">Something</NavDropdown.Item>\n                                <NavDropdown.Divider />\n                                <NavDropdown.Item className=\"text-white\" href=\"#action/3.4\">Separated link</NavDropdown.Item>\n                            </NavDropdown>*/}\n                        </Nav>\n                    </Navbar.Collapse>\n                </Navbar>\n            </React.Fragment>\n        );\n    }\n}\nexport default Navmenu;\n","import React from 'react';\nimport styles from \"./CSS/Recipe.module.css\";\n\nconst Recipe = ({title, calories, image, ingredients}) => {\n    return (\n        <div className={styles.recipe}>\n            <h1 className={styles.title}>{title}</h1>\n            <div>\n                <label for=\"Calories\"><b>Calories : </b></label>{calories.toFixed(2)}\n            </div>\n            <img className={styles.image} src={image} alt={title}/>\n            <table>\n                <thead>\n                <tr>\n                    <th>Ingrdients</th>\n                </tr>\n                </thead>\n                <tbody>\n                {ingredients.map(ingredient => (<tr>\n                    <td>{ingredient.text}</td>\n                </tr>))}\n                </tbody>\n            </table>\n        </div>\n    );\n};\nexport default Recipe;","import React, {useEffect, useState} from \"react\";\nimport Recipe from \"./Recipe\";\nimport styles from \"./CSS/RecipeView.module.css\";\n\nconst RecipeView = () => {\n    const APP_ID = \"732a00fc\";\n    const APP_KEY = \"4a3ea286fc60d80a22746e51a1befaaa\";\n\n    const [recipes, setRecipes] = useState([]);\n    const [search, setSearch] = useState(\"\");\n    const [query, setQuery] = useState(\"\");\n\n    useEffect(() => {\n        getRecipes();\n    }, [query]);\n\n    const getRecipes = async () => {\n        const response = await fetch(\n            `https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`\n        );\n        const data = await response.json();\n        setRecipes(data.hits);\n    };\n    const updateSearch = e => {\n        setSearch(e.target.value);\n    };\n    const getSearch = e => {\n        e.preventDefault();\n        setQuery(search);\n        setSearch('');\n    };\n\n    return (\n        <div className='CoronaInfo' id=\"RecipeView\">\n\n            <h1 className={styles.AppHeader}>Recipe Book</h1>\n            <div>\n                <form className={styles.searchForm} onSubmit={getSearch}>\n                    <input\n                        className={styles.searchBar}\n                        type='text'\n                        value={search}\n                        onChange={updateSearch}\n                    />\n                    <button\n                        className={styles.searchButton}\n                        type='submit'\n                    >\n                        Search\n                    </button>\n                </form>\n                <div className={styles.recipes}>\n                    {recipes.map(recipe => (\n                        <Recipe\n                            title={recipe.recipe.label}\n                            calories={recipe.recipe.calories}\n                            image={recipe.recipe.image}\n                            ingredients={recipe.recipe.ingredients}\n                        />\n                    ))\n                    }\n                </div>\n            </div>\n        </div>\n    );\n\n};\n\nexport default RecipeView;","import React from 'react';\nimport styles from \"./CSS/CoronaInfo.module.css\"\nimport Col from \"react-bootstrap/Col\";\nimport Row from \"react-bootstrap/Row\";\nimport Container from \"react-bootstrap/Container\";\nimport Card from \"react-bootstrap/Card\";\n\n/**\n * A re-usable component\n * currently used twice in CoronaInfo component\n* */\nconst CountDisplayContainer = ({heading,data0,data1,data2, labels}) => {\n\n    return (\n\n            <Container className={styles.counterDisplayContainer}>\n                <Row >\n                    <Col>\n                        <div className={styles.cardHeadingContainer}>\n                            <h1 className={styles.cardHeading}>{heading}</h1>\n                        </div>\n                    </Col>\n                    <Col>\n                        <Card className={styles.cardViews} >\n                            {/*<Card.Img variant=\"top\" src=\"holder.js/100px180\" />*/}\n                            <Card.Body className={styles.cardBox}>\n                                <p  className={styles.digits}>{numberWithCommas(data0)}</p><br/>\n                            </Card.Body>\n                            <div className={styles.cardLabel}>\n                                <p> {labels[0]}</p>\n                            </div>\n                        </Card>\n                    </Col>\n                    <Col>\n                        <Card className={styles.cardViews} >\n                            {/*<Card.Img variant=\"top\" src=\"holder.js/100px180\" />*/}\n                            <Card.Body className={styles.cardBox}>\n                                <p  className={styles.digits}>{numberWithCommas(data1)}</p><br/>\n                            </Card.Body>\n                            <div className={styles.cardLabel}>\n                                <p> {labels[1]}</p>\n                            </div>\n                        </Card>\n                    </Col>\n                    <Col>\n                        <Card className={styles.cardViews} >\n                            {/*<Card.Img variant=\"top\" src=\"holder.js/100px180\" />*/}\n                            <Card.Body className={styles.cardBox}>\n                                <p  className={styles.digits}>{numberWithCommas(data2)}</p><br/>\n                            </Card.Body>\n                            <div className={styles.cardLabel}>\n                                <p> {labels[2]}</p>\n                            </div>\n                        </Card>\n                    </Col>\n                </Row>\n            </Container>\n\n    );\n};\nexport default CountDisplayContainer;\n\nfunction numberWithCommas(x) {\n    if(typeof(x) == \"number\"){\n        /*return x_string.replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");*/\n        const n = String(x),\n            p = n.indexOf('.')\n        return n.replace(\n            /\\d(?=(?:\\d{3})+(?:\\.|$))/g,\n            (m, i) => p < 0 || i < p ? `${m},` : m\n        )\n    }\n    return x;\n}","import React, {useEffect, useState} from \"react\";\nimport Chart from \"chart.js\";\nimport {map} from \"react-bootstrap/cjs/ElementChildren\";\nimport {ListGroup} from \"react-bootstrap\";\n\nconst LineChartContainer = props => {\n    //  console.log(\"props : \"+ props.data);\n\n    // var Jan = 0, Feb = 0, Mar = 0, Apr = 0,May = 0, Jun =0, Jul = 0, Aug = 0, Sept=0, Oct =0 , Nov=0, Dec=0;\n    //const [status, setStatus] = useState('');\n    const [lastDate, setLastDate] = useState(\"\");\n    const [province, setProvince] = useState(\"\");\n    const [provinceNames, setProvinceNames] = useState([])\n    const [casesData, setCasesData] = useState([]);\n    const [provinceData, setProvinceData] = useState([]);\n    const chartRef = React.createRef();\n\n    useEffect(() => {\n       getProvinceData(props.provinceNames);\n        // loadLineChart(li);\n       // console.log(props.data);\n        console.log(\"2 - useEffect ran... \");\n    }, [props]);\n\n    const getProvinceData =  names => {\n        console.log(names);\n        console.log(\"getProvinceData()\");\n        const li =  getOntarioProvince();\n\n        // console.log(names);\n        for (let i = 0; i < names.length; ++i) {\n            console.log(names[i]);\n            var result = li.filter(e => {\n                return names[i] === e.province;\n            });\n//TODO use accumulator here for array of objects in which get the list of cases\n            console.log(result);\n            setProvinceData([\n                ...provinceData,\n                result\n            ]);\n        }\n\n        console.log(JSON.stringify(provinceData));\n        //console.log(JSON.stringify(li));\n\n\n        // const formatedLi = liGroup.map((i, index) => {\n        //  console.log(\"li[index] : \" + liGroup[index][\"province\"]);\n        //const innerData = li[index];\n        // setCasesData([]);\n        //console.log(\"innerData : \" + innerData);\n        //console.log(\"Data : \" + innerData.cases + \" - \" + innerData.province);\n        /*let cases = parseInt(j.cases, 10);\n            console.log(\"cases : \" + cases);\n            setCasesData(casesData => [...casesData, cases]);\n            console.log(casesData);\n            p=j.province;\n\n          });*/\n        /* setProvinceData([\n            ...provinceData,\n            {\n              cases: casesData,\n              province: province\n            }\n          ]);*/\n        //   console.log(\"provinceDAta: \" + provinceData);\n        //  });\n        //return formatedLi;\n    };\n\n    const getOntarioProvince =  () => {\n        console.log(\"getOntarioProvince()\");\n      //  console.log((JSON.stringify(props.data[0])));\n        console.log(props.data);\n        const li = props.data.filter(i => { return i.Province === \"Ontario\" || i.Province === \"Quebec\"})\n            .filter(i => {\n                //gets today's date and month\n\n                const today = new Date();\n                let currentMonth = parseInt(today.getMonth(), 10) + 1;\n                let currentDate = parseInt(today.getDate(), 10) - 1;\n                //gets ith date's month and date\n                const dateFormat = new Date(i[\"Date\"]);\n                let dateFormatMonth = parseInt(dateFormat.getMonth(), 10) + 1;\n                let dateFormatDate = parseInt(dateFormat.getDate(), 10) + 1;\n                //gets last day of the month\n                let dt = new Date(\n                    dateFormat.getFullYear(),\n                    dateFormat.getMonth() + 1,\n                    0\n                );\n                let dtMonth = parseInt(dt.getMonth(), 10) + 1;\n                let dtDate = parseInt(dt.getDate(), 10) + 1;\n                //console.log(\"date \"+ dateFormatDate+\"-\"+dateFormatMonth +\" -X- \"+ dtDate+\"-\"+dtMonth);\n                //console.log(\"date \"+ dateFormatDate+\"-\"+dateFormatMonth +\" -X- \"+ currentDate+\"-\"+currentMonth);\n                // check if the ith date is last date of the month or if it is the current month's date which is before the last day of month\n                return (\n                    (dateFormatMonth == dtMonth && dateFormatDate == dtDate) ||\n                    (dateFormatMonth == currentMonth && dateFormatDate == currentDate)\n                );\n            })\n            .map(function (i) {\n                //  console.log(\"cases \" + i.Cases+\" on date \" +i['Date']);\n                setProvince(i.Province);\n                let month = i[\"Date\"].substr(5, 2);\n                let date = new Date(i[\"Date\"]);\n                 console.log(\"date:\" + date);\n                let cases = parseInt(i.Cases, 10);\n                 setCasesData(casesData =>casesData.concat(cases));\n\n                setLastDate(i[\"Date\"]);\n                return {\n                    country: i.Country,\n                    province: i.Province,\n                    date: date,\n                    cases: cases,\n                    lastDate: lastDate\n                };\n            });\n        //TODO sorting by month (safe-side)\n\n        const today = new Date();\n        let dt = new Date(today.getFullYear(), today.getMonth() + 1, -1);\n        /*const lastdt = new Date(lastDate).toString();\n            setLastDate(lastdt);    */\n        console.log(li);\n        return li;\n    };\n\n    const loadLineChart = li => {\n        //  console.log(li);\n        var ctx = chartRef.current.getContext(\"2d\");\n        new Chart(ctx, {\n            type: \"line\",\n            data: {\n                labels: [\"Jan\", \"Feb\", \"Mar\", \"Apr\"],\n                datasets: [3, 15, 1048, 6648]\n            },\n            options: {\n                responsive: true,\n                scales: {\n                    yAxes: [\n                        {\n                            ticks: {\n                                beginAtZero: true\n                            }\n                        }\n                    ]\n                }\n            }\n        });\n    };\n    return (\n        <div>\n            <h5>\n                <span style={{color: \"darkcyan\"}}>Last updated on:</span>\n                {lastDate}\n            </h5>\n            <canvas\n                id={\"myChart\"}\n                ref={chartRef}\n                style={{width: \"100vh\", height: \"80vh\"}}\n            />\n        </div>\n    );\n};\nexport default LineChartContainer;\n\nfunction groupBy1(arr, prop) {\n    const map = new Map(Array.from(arr, obj => [obj[prop], []]));\n    arr.forEach(obj => map.get(obj[prop]).push(obj));\n    return Array.from(map.values());\n}\n\nfunction groupByFields(xs, groupFields) {\n    groupFields = [].concat(groupFields);\n    return xs.reduce(function (rv, x) {\n        let groupKey = groupFields.reduce((keyObject, field) => {\n            keyObject[field] = x[field];\n            return keyObject;\n        }, {});\n        (rv[JSON.stringify(groupKey)] = rv[JSON.stringify(groupKey)] || []).push(x);\n        return rv;\n    }, {});\n}\n\nconst groupBy2 = (data, key) => {\n    return data.reduce(function (acc, item) {\n        (acc[item[key]] = acc[item[key]] || []).push(item);\n        return acc;\n    }, {});\n};\nvar groupBy = function (xs, key) {\n    return xs.reduce(function (rv, x) {\n        (rv[x[key]] = rv[x[key]] || []).push(x);\n        return rv;\n    }, {});\n};\n//console.log(groupBy(['one', 'two', 'three'], 'length'));\n// => {3: [\"one\", \"two\"], 5: [\"three\"]}\n","import React, {useEffect, useState} from \"react\";\nimport Chart from \"chart.js\";\n\nconst CountryChart = (props) => {\n    const [lastDate, setLastDate] = useState(\"\");\n    const [province, setProvince] = useState(\"\");\n    const [provinceNames, setProvinceNames] = useState([])\n    const [confirmedCasesData, setConfirmedCasesData] = useState([]);\n    const [activeCasesData, setActiveCasesData] = useState([]);\n    const [deathData, setDeathData] = useState([]);\n    const [provinceData, setProvinceData] = useState([]);\n\n    const chartRef = React.createRef();\n   // console.log(props.data);\n    console.log(JSON.stringify(props.provinceList) === \"[]\");//check if empty\n\n    useEffect(() => {\n\n            let li = getDataset1();\n        console.log(JSON.stringify(li));\n            loadLineChart(li);\n    }, [props]);\n\n    const getDataset1 = () => {\n        console.log(props.data);\n        console.log(\"getData1\");\n        //  console.log((JSON.stringify(props.data[0])));\n        const li = props.data\n            .filter(i => {\n                //gets today's date and month\n\n                const today = new Date();\n                let currentMonth = parseInt(today.getMonth(), 10) + 1;\n                let currentDate = parseInt(today.getDate(), 10) - 1;\n                //gets ith date's month and date\n                const dateFormat = new Date(i[\"Date\"]);\n                let dateFormatMonth = parseInt(dateFormat.getMonth(), 10) + 1;\n                let dateFormatDate = parseInt(dateFormat.getDate(), 10) + 1;\n                //gets last day of the month\n                let dt = new Date(\n                    dateFormat.getFullYear(),\n                    dateFormat.getMonth() + 1,\n                    0\n                );\n                let dtMonth = parseInt(dt.getMonth(), 10) +1;\n                let dtDate = parseInt(dt.getDate(), 10) +1;\n                //console.log(\"date \"+ dateFormatDate+\"-\"+dateFormatMonth +\" -X- \"+ dtDate+\"-\"+dtMonth);\n                //console.log(\"date \"+ dateFormatDate+\"-\"+dateFormatMonth +\" -X- \"+ currentDate+\"-\"+currentMonth);\n                // check if the ith date is l//TODO sorting by month (safe-side)ast date of the month or if it is the current month's date which is before the last day of month\n                return (\n                    (dateFormatMonth == dtMonth && dateFormatDate == dtDate) ||\n                    (dateFormatMonth == currentMonth && dateFormatDate == currentDate)\n                );\n            })\n            .map( (i) => {\n                 console.log(\"cases \" + i.Cases+\" on date \" +i['Date']);\n                setProvince(i.Province);\n                let month = i[\"Date\"].substr(5, 2);\n                let date = new Date(i[\"Date\"]);\n                console.log(\"date:\" + date);\n                let cases = {\n                    confirmed : parseInt(i.Confirmed, 10),\n                    active : parseInt(i.Active, 10),\n                    deaths : parseInt(i.Deaths, 10)\n                }\n                setConfirmedCasesData(data =>data.concat(cases.confirmed));\n                setActiveCasesData(data =>data.concat(cases.active));\n                setDeathData(data =>data.concat(cases.deaths));\n\n                setLastDate(i[\"Date\"]);\n                return {\n                    country: i.Country,\n                    province: i.Province,\n                    date: date,\n                    confirmed: cases.confirmed,\n                    active: cases.active,\n                    deaths: cases.deaths,\n                    lastDate: lastDate\n                };\n            });\n        console.log(li);\n        let active = [].concat(li.map(i => i.active));\n        let confirmed = [].concat(li.map(i => i.confirmed));\n        let deaths = [].concat(li.map(i => i.deaths));\n        let labels = [].concat(li.map(i => {\n            //return i.date.getDate();\n            let date=new Date(i.date);\n            let dt =\"\";\n            dt=dt.concat(date.getDate().toString());\n            dt = dt.concat(\" - \");\n            dt= dt.concat(getMonthMMM(date))\n            console.log(dt);\n            return dt;\n        }));\n        let province = [...new Set(li.map(i => {\n            if(!i.province==\"\"){\n                return i.province\n            }else{\n                return i.country\n            }\n        }))];\n        return  {\n            active: active,\n            confirmed: confirmed,\n            deaths:deaths,\n            labels:labels,\n            province:province\n        };\n    };\n\n    const loadLineChart = li => {\n        console.log(li)\n        const ctx = chartRef.current.getContext(\"2d\");\n        new Chart(ctx, {\n            type: \"bar\",\n            data: {\n                datasets: [{\n                    label: 'Active Cases',\n                    data: li[\"active\"],\n\n                },\n                    {\n                    label: 'Deaths',\n                    data: li[\"deaths\"],\n                    backgroundColor: [\n                        'rgba(255, 120, 132, 0.2)',\n                        'rgba(255, 120, 132, 0.2)',\n                        'rgba(255, 120, 132, 0.2)',\n                        'rgba(255, 120, 132, 0.2)',\n                        'rgba(255, 120, 132, 0.2)',\n\n                    ],\n                },\n                    {\n                    label: 'Confirmed Cases',\n                    data: li[\"confirmed\"],\n\n                    // Changes this dataset to become a line\n                    type: 'line'\n                }],\n                labels: li[\"labels\"]\n            },\n            options: {\n                responsive: true,\n                scales: {\n                    yAxes: [\n                        {\n                            ticks: {\n                                beginAtZero: false\n                            }\n                        }\n                    ]\n                },\n                plugins: {\n                    filler: {\n                        propagate: true\n                    }\n                }\n            }\n        });\n    };\n    return (\n        <div>\n            <p>\n                <span style={{color: \"darkcyan\"}}>Last updated on:</span>\n                {lastDate}\n            </p>\n            <canvas\n                id={\"myChart\"}\n                ref={chartRef}\n                style={{width: \"100vh\", height: \"80vh\"}}\n            />\n            <div>\n\n            </div>\n        </div>\n    );\n};\nexport default CountryChart;\n//\n/**\n * @param : Date Object\n * @return string month (MMM/ month)\n * To get month name from Date object\n * */\nconst getMonthMMM = (obj) =>{\n  let x = obj.getMonth();\n  const month = [\"January\", \"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"]\n  const mon = [\"Jan\", \"Feb\",\"Mar\",\"Apr\",\"May\",\"June\",\"July\",\"Aug\",\"Sept\",\"Oct\",\"Nov\",\"Dec\"]\n  return mon[x];\n};","import React, {useEffect, useState} from \"react\";\nimport styles from \"./CSS/CoronaInfo.module.css\";\nimport CountDisplayContainer from \"./CountDisplayContainer\";\nimport LineChartContainer from \"./LineChartContainer\";\nimport Select from '@material-ui/core/Select';\nimport CountryChart from \"./CountryChart\";\n\n\nconst CoronaInfo = () => {\n    const [globalData, setGlobalData] = useState([]);\n    const [countriesData, setCountriesData] = useState([]);\n    const [dayOneData, setDayOneData] = useState([]);\n    const [provinceList, setProvinceList] = useState([]);\n    const [countryList,setCountryList] =useState([]);\n    const [selectCountry, setSelectCountry] = React.useState({});\n\n    /*const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(null);*/\n\n    const API_summary = `https://api.covid19api.com/summary`;\n    const API_countryList = `https://api.covid19api.com/countries`;\n    var API_DayOne = `https://api.covid19api.com/dayone/country/canada/status/confirmed`;\n\n    useEffect(() => {\n        console.log(\"1 - useEffect ran... \");\n        getTotalGlobalCount();\n         getCountryList();\n    },[]);\n\n    const getTotalGlobalCount = async () => {\n        await fetch(API_summary)\n            .then(res => res.json())\n            .then(data => {\n                setGlobalData(data.Global);\n                setCountriesData(data.Countries);\n            });\n    };\n    const getCountryList = async() => {\n      await fetch(API_countryList)\n            .then(res => res.json())\n            .then(data => {\n                setCountryList(data);\n            });\n    };\n    const handleCountryChange = (event) => {\n        console.log(selectCountry);\n        //console.log(event.target);\n        onCountrySelect(event.target.value).then((res) => {\n            setSelectCountry(res[0]);\n            getCountByDayOne(res[0].Slug);\n        });\n    };\n    const onCountrySelect = async (c) => {\n        console.log(c);\n        const selectedObj = countriesData.filter((i)=>{\n           // console.log(i.CountryCode +\"===\"+  c);\n            return i.CountryCode ==  c ;\n        });\n        console.log(selectedObj);\n        console.log(\"-  selected country\");\n        return selectedObj;\n    }\n\n    const getCountByDayOne = async (val) => {\n        //fetchData()\n        //TODO error check for val\n        API_DayOne = `https://api.covid19api.com/dayone/country/${val}`;\n        console.log(API_DayOne)\n        let data = await fetch(API_DayOne)\n            .then(res => res.json());\n        setDayOneData( data);\n      //  console.log(data);\n        // if data is empty ELSE if province is empty\n        if(JSON.stringify(data) === '[]' ){\n            console.log(\"province emtpty\")\n            //  TODO\n            //console.log(data);\n        }else {\n            if(!(data[0].Province === \"\")){\n                const list = getProvinceList(data);\n                setProvinceList(list);\n            }\n        }\n    };\n    /**\n     * get List of names of province\n     */\n    const getProvinceList = (data) => {\n        let unique = [...new Set(data.map(item => {\n            if(item.Province == \"\"){\n                return item.Country;\n            }else{\n                return item.Province;\n            }\n\n        }))];\n        return unique;\n    };\n    /*const getProvinceList = (data) => {\n     // const unique = [...new Set(array.map(item => item.age))];\n      const uniqueProvinces = [...new Set(data.map(item => item.Province))];\n  };*/\n    const countryOptions = countryList.map(obj =>\n            <option value={obj.ISO2} label={obj.Country} >{obj.Country}</option>\n        )\n    return (\n        <div className={styles.newsInfo} id=\"newsInfo\" onLoad={() => getTotalGlobalCount()}>\n            <h3 className=\"text-white-50 align-content-center justify-content-around font-weight-bolder\">\n                News Book\n            </h3>\n\n            <h1><b>C<i className=\"fas fa-virus fa-x\" style={{color:\"darkcyan\"}}></i>VID-19</b></h1>\n\n            <CountDisplayContainer\n                heading={\"Total\"}\n                data0={globalData.TotalConfirmed}\n                data1={globalData.TotalRecovered}\n                data2={globalData.TotalDeaths}\n                labels={[\"Cases\", \"Recovered\", \"Death\"]}\n            />\n            <hr style={{width: \"80%\"}}/>\n\n            <div >\n                <label id=\"demo-simple-select-label\">Select Country</label>\n                <Select\n                    id=\"demo-simple-select\"\n                    value={selectCountry.Country}\n                    onChange={(val)=>handleCountryChange(val)}\n                >\n                    {countryOptions}\n\n                </Select>\n\n                {!(JSON.stringify(selectCountry) === '{}') &&\n                    <CountDisplayContainer\n                    heading={`${selectCountry.Country}`}\n                    data0={selectCountry.TotalConfirmed}\n                    data1={selectCountry.TotalRecovered}\n                    data2={selectCountry.TotalDeaths}\n                    labels={[\"Cases\", \"Recovered\", \"Death\"]}\n                    />\n                }\n                {/*<LineChartContainer data={dayOneData} provinceList={provinceList}/>*/}\n                <CountryChart data={dayOneData} provinceList={provinceList} />\n            </div>\n            <p>Source: https://www.covid19api.com/</p>\n        </div>\n    );\n};\nexport default CoronaInfo;\n","import React from 'react';\n\nconst Home = () => (\n    <div>\n        <h1 style={{color:\"aliceblue\",fontFamily:\"fantasy\"}}>Welcome to the Pooja's Website!</h1>\n    </div>\n)\n\nexport default Home;","import React, {useEffect, useState} from 'react';\nimport FruitsAndVegView from \"./FruitsAndVegView\";\nimport styles from \"./CSS/FruitsAndVeg.module.css\";\n\nconst FruitsAndVeg = () => {\n    const [information, setInformation] = useState(\"\");\n    const [search, setSearch] = useState(\"\");\n    const [query, setQuery] = useState(\"Mango\");\n    //const API_Request = ;\n    const APP_ID = \"732a00fc\";\n    const APP_KEY = \"4a3ea286fc60d80a22746e51a1befaaa\";\n\n\n    useEffect(() => {\n        getInfo();\n        console.log(\"use Effect run\");\n    }, [query]);\n\n    const getInfo = async () => {\n        console.log(\"query : \" + query);\n        //const response = await\n        /*fetch(\"http://tropicalfruitandveg.com/api/tfvjsonapi.php?tfvitem=Mango\",*/\n        // const myurl = new URL('http://tropicalfruitandveg.com/api/tfvjsonapi.php?tfvitem=mango');\n        const myurl = new URL('https://api.npms.io/v2/search?q=react');\n        const params = {tfvitem: query};\n        myurl.search = new URLSearchParams(params).toString();\n\n        /*const response = await fetch(\"http://tropicalfruitandveg.com/api/tfvjsonapi.php?tfvitem=\"+query, {\n            mode: \"no-cors\",\n            headers: {\n                \"Access-Control-Allow-Origin\" : \"*\",\n                \"Access-Control-Allow-Credentials\" : false\n            }\n        });\n        const data = await response.json();\n        console.log(\"data : \" +data);*/\n\n        // GET request using fetch with error handling\n        fetch(\"https://api.npms.io/v2/search?q=react\")\n            .then(async response => {\n                const data = await parseJSON(response);\n\n                // check for error response\n                if (!response.ok) {\n                    // get error message from body or default to response statusText\n                    const error = (data && data.message) || response.statusText;\n                    console.log(\"NOT OKAY\");\n                    return Promise.reject(error);\n                }\n                console.log(\"OKAY\");\n                console.log(data.results[0].package.description);\n            })\n            .catch(error => {\n                console.error('There was an error!', error);\n            });\n\n        // return setInformation(data);\n// empty dependency array means this effect will only run once (like componentDidMount in classes)\n    };\n    const parseJSON = (response) => {\n        return response.text().then(function(text) {\n            return text ? JSON.parse(text) : []\n        });\n    };\n    const updateSearch = e => {\n        setSearch(e.target.value);\n    };\n    const getSearch = e => {\n        e.preventDefault();\n        setQuery(search);\n        setSearch('');\n    };\n    return (\n\n        <div className='newsInfo' id=\"newsInfo\">\n            <h1 className=\"text-white-50\">Know your Tropical Fruits and vegetables</h1>\n            <form className={styles.searchForm} onSubmit={getSearch}>\n                <input\n                    className={styles.searchBar}\n                    type='text'\n                    value={search}\n                    onChange={updateSearch}\n                />\n                <button\n                    className={styles.searchButton}\n                    type='submit'\n                >\n                    Search\n                </button>\n            </form>\n            <div className={styles.recipes} id=\"demo\">\n                <p>{console.log(\"information  is : \"+information)}</p>\n            </div>\n        </div>\n\n    );\n};\nexport default FruitsAndVeg;\n/* <FruitsAndVegView\n                       tfvname={i.tfvname}\n                       botname={i.botname}\n                       othname={i.othname}\n                       imageurl={i.imageurl}\n                       description={i.discription}\n                       uses={i.uses}\n                       propagation={i.propogation}\n                       soil={i.soil}\n                       climate={i.climate}\n                       health={i.health}\n                       />\n                   */","import React, {useEffect, useState} from 'react';\nimport './CSS/App.css';\nimport Navmenu from './navmenu';\nimport RecipeView from \"./RecipeView\";\nimport { Switch } from \"react-router-dom\";\nimport CoronaInfo from './CoronaInfo';\nimport { Route } from 'react-router';\nimport Home from \"./home\";\nimport FruitsAndVeg from \"./FruitsAndVeg\";\nconst App = () => {\n    return (\n        <div className='App'>\n            <header>\n                <Navmenu/>\n            </header>\n                <Switch>\n                    <Route exact path='/' component={Home} />\n                    <Route path='/Recipes' component={RecipeView}/>\n                    <Route path='/CoronaInfo' component={CoronaInfo}/>\n                    <Route path='/FruitsAndVeg' component={FruitsAndVeg}/>\n                </Switch>\n        </div>\n    );\n};\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <App />\n    </BrowserRouter>,\n  document.getElementById('root')\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"newsInfo\":\"CoronaInfo_newsInfo__3huco\",\"counterDisplayContainer\":\"CoronaInfo_counterDisplayContainer__t0OWw\",\"cardHeadingContainer\":\"CoronaInfo_cardHeadingContainer__2Pz68\",\"cardHeading\":\"CoronaInfo_cardHeading__36MLb\",\"cardViews\":\"CoronaInfo_cardViews__2_hhI\",\"cardBox\":\"CoronaInfo_cardBox__286zR\",\"digits\":\"CoronaInfo_digits__2l_DR\",\"cardLabel\":\"CoronaInfo_cardLabel__1FIUO\"};"],"sourceRoot":""}