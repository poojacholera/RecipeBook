{"version":3,"sources":["CSS/CoronaInfo.module.css","CSS/Recipe.module.css","CSS/RecipeView.module.css","CSS/FruitsAndVeg.module.css","CSS/VideoChat.module.css","CSS/navmenu.module.css","navmenu.jsx","Recipe.jsx","RecipeView.jsx","CountDisplayContainer.jsx","LineChartContainer.jsx","CountryChart.jsx","ProvinceChart.jsx","CoronaInfo.jsx","home.jsx","FruitsAndVeg.jsx","JitsiMeetComponent.jsx","App.js","index.js"],"names":["module","exports","newsInfo","counterDisplayContainer","cardHeadingContainer","cardHeading","cardViews","cardBox","digits","cardLabel","recipe","image","title","AppHeader","searchForm","searchBar","searchButton","recipes","frameContainer","navbar","headerText","whiteText","Navmenu","react_default","a","createElement","Fragment","Navbar","className","styles","Brand","href","Toggle","aria-controls","Collapse","id","Nav","Link","react_router_dom","exact","to","Component","Recipe","_ref","calories","ingredients","for","toFixed","src","alt","map","ingredient","text","RecipeView","_useState","useState","_useState2","Object","slicedToArray","setRecipes","_useState3","_useState4","search","setSearch","_useState5","_useState6","query","setQuery","useEffect","getRecipes","asyncToGenerator","regenerator_default","mark","_callee","response","data","wrap","_context","prev","next","fetch","concat","sent","json","hits","stop","apply","this","arguments","onSubmit","e","preventDefault","type","value","onChange","target","placeholder","src_Recipe","label","CountDisplayContainer","heading","data0","data1","data2","labels","Container","Row","Col","Card","Body","numberWithCommas","x","n","String","p","indexOf","replace","m","i","CountryChart","props","lastDate","setLastDate","setProvince","_useState7","_useState8","setConfirmedCasesData","_useState9","_useState10","setActiveCasesData","_useState11","_useState12","setDeathData","_useState13","_useState14","chartRef","React","createRef","li","getDataset1","console","log","JSON","stringify","loadLineChart","filter","today","Date","currentMonth","parseInt","getMonth","currentDate","getDate","dateFormat","dateFormatMonth","dateFormatDate","dt","getFullYear","dtMonth","dtDate","Province","substr","date","cases","confirmed","Confirmed","active","Active","deaths","Deaths","country","Country","province","toString","getMonthMMM","toConsumableArray","Set","ctx","current","getContext","Chart","datasets","backgroundColor","options","responsive","scales","yAxes","ticks","beginAtZero","plugins","filler","propagate","style","color","ref","width","height","obj","ProvinceChart","error","getDataset","Cases","display","CoronaInfo","globalData","setGlobalData","countriesData","setCountriesData","dayOneData","setDayOneData","provinceList","setProvinceList","countryList","setCountryList","_React$useState","_React$useState2","selectCountry","setSelectCountry","API_DayOne","getTotalGlobalCount","getCountryList","then","res","Global","Countries","_ref2","_callee2","_context2","onCountrySelect","_ref3","_callee3","c","selectedObj","_context3","CountryCode","abrupt","_x","getCountByDayOne","_ref4","_callee4","val","list","_context4","getProvinceList","_x2","item","countryOptions","sort","b","ISO2","allProvinceCharts","src_ProvinceChart","flag","onLoad","src_CountDisplayContainer","TotalConfirmed","TotalRecovered","TotalDeaths","Select","event","Slug","src_CountryChart","Home","fontFamily","FruitsAndVeg","information","getInfo","myurl","params","URL","tfvitem","URLSearchParams","parseJSON","ok","message","statusText","Promise","reject","results","package","description","catch","parse","JitsiMeetComponent","loading","setLoading","jitsiContainerStyle","window","JitsiMeetExternalAPI","roomName","parentNode","document","getElementById","interfaceConfigOverwrite","filmStripOnly","SHOW_JITSI_WATERMARK","SHOW_WATERMARK_FOR_GUESTS","TOOLBAR_BUTTONS","RANDOM_AVATAR_URL_PREFIX","RANDOM_AVATAR_URL_SUFFIX","FILM_STRIP_MAX_HEIGHT","MOBILE_APP_PROMO","DEFAULT_BACKGROUND","configOverwrite","disableSimulcast","transcribingEnabled","jwt","api","addEventListener","executeCommand","startConference","alert","CircularProgress","App","navmenu","react_router","path","component","ReactDOM","render","basename","process","src_App"],"mappings":"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","file":"static/js/main.5b68e012.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"newsInfo\":\"CoronaInfo_newsInfo__3huco\",\"counterDisplayContainer\":\"CoronaInfo_counterDisplayContainer__t0OWw\",\"cardHeadingContainer\":\"CoronaInfo_cardHeadingContainer__2Pz68\",\"cardHeading\":\"CoronaInfo_cardHeading__36MLb\",\"cardViews\":\"CoronaInfo_cardViews__2_hhI\",\"cardBox\":\"CoronaInfo_cardBox__286zR\",\"digits\":\"CoronaInfo_digits__2l_DR\",\"cardLabel\":\"CoronaInfo_cardLabel__1FIUO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"recipe\":\"Recipe_recipe__3DkKg\",\"image\":\"Recipe_image__3R8xD\",\"title\":\"Recipe_title__2muBm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"AppHeader\":\"RecipeView_AppHeader__ct-vo\",\"searchForm\":\"RecipeView_searchForm__2UyJX\",\"searchBar\":\"RecipeView_searchBar__159Su\",\"searchButton\":\"RecipeView_searchButton__3N6nb\",\"recipes\":\"RecipeView_recipes__235iL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"recipe\":\"FruitsAndVeg_recipe__3EZfO\",\"image\":\"FruitsAndVeg_image__3U8Cp\",\"title\":\"FruitsAndVeg_title__302bN\",\"AppHeader\":\"FruitsAndVeg_AppHeader__1DPKm\",\"searchForm\":\"FruitsAndVeg_searchForm__39SbN\",\"searchBar\":\"FruitsAndVeg_searchBar__3J8Cr\",\"searchButton\":\"FruitsAndVeg_searchButton__3DyS0\",\"recipes\":\"FruitsAndVeg_recipes__2JxZ1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"AppHeader\":\"VideoChat_AppHeader__2DLK_\",\"frameContainer\":\"VideoChat_frameContainer__F6NP4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navbar\":\"navmenu_navbar__1hhKl\",\"headerText\":\"navmenu_headerText__1kdRe\",\"whiteText\":\"navmenu_whiteText__2AwIV\"};","import React,{Component} from 'react';\nimport Navbar from \"react-bootstrap/Navbar\";\nimport Nav from \"react-bootstrap/Nav\";\nimport NavDropdown from \"react-bootstrap/NavDropdown\";\nimport styles from \"./CSS/navmenu.module.css\";\nimport { Link } from 'react-router-dom'\n\n\nclass Navmenu extends Component {\n    render() {\n        return (\n            <React.Fragment>\n                <Navbar className={styles.navbar} >\n                    <Navbar.Brand href=\"#home\"><h2 className={styles.headerText}>Pooja</h2></Navbar.Brand>\n                    <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n                    <Navbar.Collapse id=\"basic-navbar-nav\">\n                        <Nav  className=\"mr-auto\">\n                            <Nav.Link ><Link className=\"text-white\" exact to='/'>Home</Link></Nav.Link>\n                            <Nav.Link ><Link className=\"text-white\" to='/Recipes'>Ingredient Search</Link></Nav.Link>\n                            <Nav.Link ><Link className=\"text-white\" to='/CoronaInfo'>Corona-Info</Link></Nav.Link>\n                            <Nav.Link ><Link className=\"text-white\" to='/VideoChat'>Jitsi Video Chat</Link></Nav.Link>\n                            {/*<Nav.Link ><Link className=\"text-white\" to='/WhereByVideoChat'>WhereBy Video Call</Link></Nav.Link>*/}\n                            {/*<Nav.Link ><Link className=\"text-white\" to='/ZoomVideoChat'>Zoom Video Call</Link></Nav.Link>*/}\n                            <Nav.Link ><Link className=\"text-white\" to='/FruitsAndVeg' >Know your Food</Link></Nav.Link>\n\n                           {/* <NavDropdown className=\"text-white\"  className={styles.whiteText}title=\"Dropdown\" id=\"basic-nav-dropdown\">\n                                <NavDropdown.Item className=\"text-white\" href=\"#action/3.1\">Action</NavDropdown.Item>\n                                <NavDropdown.Item className=\"text-white\" href=\"#action/3.2\">Another action</NavDropdown.Item>\n                                <NavDropdown.Item className=\"text-white\" href=\"#action/3.3\">Something</NavDropdown.Item>\n                                <NavDropdown.Divider />\n                                <NavDropdown.Item className=\"text-white\" href=\"#action/3.4\">Separated link</NavDropdown.Item>\n                            </NavDropdown>*/}\n                        </Nav>\n                    </Navbar.Collapse>\n                </Navbar>\n            </React.Fragment>\n        );\n    }\n}\nexport default Navmenu;\n","import React from 'react';\nimport styles from \"./CSS/Recipe.module.css\";\n\nconst Recipe = ({title, calories, image, ingredients}) => {\n    return (\n        <div className={styles.recipe}>\n            <h1 className={styles.title}>{title}</h1>\n            <div>\n                <label for=\"Calories\"><b>Calories : </b></label>{calories.toFixed(2)}\n            </div>\n            <img className={styles.image} src={image} alt={title}/>\n            <table>\n                <thead>\n                <tr>\n                    <th>Ingrdients</th>\n                </tr>\n                </thead>\n                <tbody>\n                {ingredients.map(ingredient => (<tr>\n                    <td>{ingredient.text}</td>\n                </tr>))}\n                </tbody>\n            </table>\n        </div>\n    );\n};\nexport default Recipe;","import React, {useEffect, useState} from \"react\";\nimport Recipe from \"./Recipe\";\nimport styles from \"./CSS/RecipeView.module.css\";\n\nconst RecipeView = () => {\n    const APP_ID = \"732a00fc\";\n    const APP_KEY = \"4a3ea286fc60d80a22746e51a1befaaa\";\n\n    const [recipes, setRecipes] = useState([]);\n    const [search, setSearch] = useState(\"\");\n    const [query, setQuery] = useState(\"\");\n\n    useEffect(() => {\n        getRecipes();\n    }, [query]);\n\n    const getRecipes = async () => {\n        const response = await fetch(\n            `https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`\n        );\n        const data = await response.json();\n        setRecipes(data.hits);\n    };\n    const updateSearch = e => {\n        setSearch(e.target.value);\n    };\n    const getSearch = e => {\n        e.preventDefault();\n        setQuery(search);\n        setSearch('');\n    };\n\n    return (\n        <div className='CoronaInfo' id=\"RecipeView\">\n\n            <h1 className={styles.AppHeader}>Ingredient Search Book</h1>\n            <div>\n                <p>Search for recipes that contain the ingredients you want! <br/> Also, Find ingredients by dish</p>\n                <form className={styles.searchForm} onSubmit={getSearch}>\n                    <input\n                        className={styles.searchBar}\n                        type='text'\n                        value={search}\n                        onChange={updateSearch}\n                        placeholder={'Ingredient Search:'}\n                    />\n                    <button\n                        className={styles.searchButton}\n                        type='submit'\n                    >\n                        Search\n                    </button>\n                </form>\n                <div className={styles.recipes}>\n                    {recipes.map(recipe => (\n                        <Recipe\n                            title={recipe.recipe.label}\n                            calories={recipe.recipe.calories}\n                            image={recipe.recipe.image}\n                            ingredients={recipe.recipe.ingredients}\n                        />\n                    ))\n                    }\n                </div>\n            </div>\n        </div>\n    );\n\n};\n\nexport default RecipeView;","import React from 'react';\nimport styles from \"./CSS/CoronaInfo.module.css\"\nimport Col from \"react-bootstrap/Col\";\nimport Row from \"react-bootstrap/Row\";\nimport Container from \"react-bootstrap/Container\";\nimport Card from \"react-bootstrap/Card\";\n\n/**\n * A re-usable component\n * currently used twice in CoronaInfo component\n* */\nconst CountDisplayContainer = ({heading,data0,data1,data2, labels}) => {\n\n    return (\n\n            <Container className={styles.counterDisplayContainer}>\n                <Row >\n                    <Col>\n                        <div className={styles.cardHeadingContainer}>\n                            <h1 className={styles.cardHeading}>{heading}</h1>\n                        </div>\n                    </Col>\n                    <Col>\n                        <Card className={styles.cardViews} >\n                            {/*<Card.Img variant=\"top\" src=\"holder.js/100px180\" />*/}\n                            <Card.Body className={styles.cardBox}>\n                                <p  className={styles.digits}>{numberWithCommas(data0)}</p><br/>\n                            </Card.Body>\n                            <div className={styles.cardLabel}>\n                                <p> {labels[0]}</p>\n                            </div>\n                        </Card>\n                    </Col>\n                    <Col>\n                        <Card className={styles.cardViews} >\n                            {/*<Card.Img variant=\"top\" src=\"holder.js/100px180\" />*/}\n                            <Card.Body className={styles.cardBox}>\n                                <p  className={styles.digits}>{numberWithCommas(data1)}</p><br/>\n                            </Card.Body>\n                            <div className={styles.cardLabel}>\n                                <p> {labels[1]}</p>\n                            </div>\n                        </Card>\n                    </Col>\n                    <Col>\n                        <Card className={styles.cardViews} >\n                            {/*<Card.Img variant=\"top\" src=\"holder.js/100px180\" />*/}\n                            <Card.Body className={styles.cardBox}>\n                                <p  className={styles.digits}>{numberWithCommas(data2)}</p><br/>\n                            </Card.Body>\n                            <div className={styles.cardLabel}>\n                                <p> {labels[2]}</p>\n                            </div>\n                        </Card>\n                    </Col>\n                </Row>\n            </Container>\n\n    );\n};\nexport default CountDisplayContainer;\n\nfunction numberWithCommas(x) {\n    if(typeof(x) == \"number\"){\n        /*return x_string.replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");*/\n        const n = String(x),\n            p = n.indexOf('.')\n        return n.replace(\n            /\\d(?=(?:\\d{3})+(?:\\.|$))/g,\n            (m, i) => p < 0 || i < p ? `${m},` : m\n        )\n    }\n    return x;\n}","import React, {useEffect, useState} from \"react\";\nimport Chart from \"chart.js\";\nimport {map} from \"react-bootstrap/cjs/ElementChildren\";\nimport {ListGroup} from \"react-bootstrap\";\n\nconst LineChartContainer = props => {\n    //  console.log(\"props : \"+ props.data);\n\n    // var Jan = 0, Feb = 0, Mar = 0, Apr = 0,May = 0, Jun =0, Jul = 0, Aug = 0, Sept=0, Oct =0 , Nov=0, Dec=0;\n    //const [status, setStatus] = useState('');\n    const [lastDate, setLastDate] = useState(\"\");\n    const [province, setProvince] = useState(\"\");\n    const [provinceNames, setProvinceNames] = useState([])\n    const [casesData, setCasesData] = useState([]);\n    const [provinceData, setProvinceData] = useState([]);\n    const chartRef = React.createRef();\n\n    useEffect(() => {\n       getProvinceData(props.provinceNames);\n        // loadLineChart(li);\n       // console.log(props.data);\n        console.log(\"2 - useEffect ran... \");\n    }, [props]);\n\n    const getProvinceData =  names => {\n        console.log(names);\n        console.log(\"getProvinceData()\");\n        const li =  getOntarioProvince();\n\n        // console.log(names);\n        for (let i = 0; i < names.length; ++i) {\n            console.log(names[i]);\n            var result = li.filter(e => {\n                return names[i] === e.province;\n            });\n//TODO use accumulator here for array of objects in which get the list of cases\n            console.log(result);\n            setProvinceData([\n                ...provinceData,\n                result\n            ]);\n        }\n\n        console.log(JSON.stringify(provinceData));\n        //console.log(JSON.stringify(li));\n\n\n        // const formatedLi = liGroup.map((i, index) => {\n        //  console.log(\"li[index] : \" + liGroup[index][\"province\"]);\n        //const innerData = li[index];\n        // setCasesData([]);\n        //console.log(\"innerData : \" + innerData);\n        //console.log(\"Data : \" + innerData.cases + \" - \" + innerData.province);\n        /*let cases = parseInt(j.cases, 10);\n            console.log(\"cases : \" + cases);\n            setCasesData(casesData => [...casesData, cases]);\n            console.log(casesData);\n            p=j.province;\n\n          });*/\n        /* setProvinceData([\n            ...provinceData,\n            {\n              cases: casesData,\n              province: province\n            }\n          ]);*/\n        //   console.log(\"provinceDAta: \" + provinceData);\n        //  });\n        //return formatedLi;\n    };\n\n    const getOntarioProvince =  () => {\n        console.log(\"getOntarioProvince()\");\n      //  console.log((JSON.stringify(props.data[0])));\n        console.log(props.data);\n        const li = props.data.filter(i => { return i.Province === \"Ontario\" || i.Province === \"Quebec\"})\n            .filter(i => {\n                //gets today's date and month\n\n                const today = new Date();\n                let currentMonth = parseInt(today.getMonth(), 10) + 1;\n                let currentDate = parseInt(today.getDate(), 10) - 1;\n                //gets ith date's month and date\n                const dateFormat = new Date(i[\"Date\"]);\n                let dateFormatMonth = parseInt(dateFormat.getMonth(), 10) + 1;\n                let dateFormatDate = parseInt(dateFormat.getDate(), 10) + 1;\n                //gets last day of the month\n                let dt = new Date(\n                    dateFormat.getFullYear(),\n                    dateFormat.getMonth() + 1,\n                    0\n                );\n                let dtMonth = parseInt(dt.getMonth(), 10) + 1;\n                let dtDate = parseInt(dt.getDate(), 10) + 1;\n                //console.log(\"date \"+ dateFormatDate+\"-\"+dateFormatMonth +\" -X- \"+ dtDate+\"-\"+dtMonth);\n                //console.log(\"date \"+ dateFormatDate+\"-\"+dateFormatMonth +\" -X- \"+ currentDate+\"-\"+currentMonth);\n                // check if the ith date is last date of the month or if it is the current month's date which is before the last day of month\n                return (\n                    (dateFormatMonth == dtMonth && dateFormatDate == dtDate) ||\n                    (dateFormatMonth == currentMonth && dateFormatDate == currentDate)\n                );\n            })\n            .map(function (i) {\n                //  console.log(\"cases \" + i.Cases+\" on date \" +i['Date']);\n                setProvince(i.Province);\n                let month = i[\"Date\"].substr(5, 2);\n                let date = new Date(i[\"Date\"]);\n                 console.log(\"date:\" + date);\n                let cases = parseInt(i.Cases, 10);\n                 setCasesData(casesData =>casesData.concat(cases));\n\n                setLastDate(i[\"Date\"]);\n                return {\n                    country: i.Country,\n                    province: i.Province,\n                    date: date,\n                    cases: cases,\n                    lastDate: lastDate\n                };\n            });\n        //TODO sorting by month (safe-side)\n\n        const today = new Date();\n        let dt = new Date(today.getFullYear(), today.getMonth() + 1, -1);\n        /*const lastdt = new Date(lastDate).toString();\n            setLastDate(lastdt);    */\n        console.log(li);\n        return li;\n    };\n\n    const loadLineChart = li => {\n        //  console.log(li);\n        var ctx = chartRef.current.getContext(\"2d\");\n        new Chart(ctx, {\n            type: \"line\",\n            data: {\n                labels: [\"Jan\", \"Feb\", \"Mar\", \"Apr\"],\n                datasets: [3, 15, 1048, 6648]\n            },\n            options: {\n                responsive: true,\n                scales: {\n                    yAxes: [\n                        {\n                            ticks: {\n                                beginAtZero: true\n                            }\n                        }\n                    ]\n                }\n            }\n        });\n    };\n    return (\n        <div>\n            <h5>\n                <span style={{color: \"darkcyan\"}}>Last updated on:</span>\n                {lastDate}\n            </h5>\n            <canvas\n                id={\"myChart\"}\n                ref={chartRef}\n                style={{width: \"100vh\", height: \"80vh\"}}\n            />\n        </div>\n    );\n};\nexport default LineChartContainer;\n\nfunction groupBy1(arr, prop) {\n    const map = new Map(Array.from(arr, obj => [obj[prop], []]));\n    arr.forEach(obj => map.get(obj[prop]).push(obj));\n    return Array.from(map.values());\n}\n\nfunction groupByFields(xs, groupFields) {\n    groupFields = [].concat(groupFields);\n    return xs.reduce(function (rv, x) {\n        let groupKey = groupFields.reduce((keyObject, field) => {\n            keyObject[field] = x[field];\n            return keyObject;\n        }, {});\n        (rv[JSON.stringify(groupKey)] = rv[JSON.stringify(groupKey)] || []).push(x);\n        return rv;\n    }, {});\n}\n\nconst groupBy2 = (data, key) => {\n    return data.reduce(function (acc, item) {\n        (acc[item[key]] = acc[item[key]] || []).push(item);\n        return acc;\n    }, {});\n};\nvar groupBy = function (xs, key) {\n    return xs.reduce(function (rv, x) {\n        (rv[x[key]] = rv[x[key]] || []).push(x);\n        return rv;\n    }, {});\n};\n//console.log(groupBy(['one', 'two', 'three'], 'length'));\n// => {3: [\"one\", \"two\"], 5: [\"three\"]}\n","import React, {useEffect, useState} from \"react\";\nimport Chart from \"chart.js\";\n\nconst CountryChart = (props) => {\n    const [lastDate, setLastDate] = useState(\"\");\n    const [province, setProvince] = useState(\"\");\n    const [provinceNames, setProvinceNames] = useState([])\n    const [confirmedCasesData, setConfirmedCasesData] = useState([]);\n    const [activeCasesData, setActiveCasesData] = useState([]);\n    const [deathData, setDeathData] = useState([]);\n    const [provinceData, setProvinceData] = useState([]);\n\n    const chartRef = React.createRef();\n   // console.log(props.data);\n   // console.log(JSON.stringify(props.provinceList) === \"[]\");//check if empty\n\n    useEffect(() => {\n\n            let li = getDataset1();\n        console.log(JSON.stringify(li));\n            loadLineChart(li);\n    }, [props]);\n\n    const getDataset1 = () => {\n        console.log(props.data);\n        console.log(\"getData1\");\n        //  console.log((JSON.stringify(props.data[0])));\n        const li = props.data\n            .filter(i => {\n                //gets today's date and month\n\n                const today = new Date();\n                let currentMonth = parseInt(today.getMonth(), 10) + 1;\n                let currentDate = parseInt(today.getDate(), 10) - 1;\n                //gets ith date's month and date\n                const dateFormat = new Date(i[\"Date\"]);\n                let dateFormatMonth = parseInt(dateFormat.getMonth(), 10) + 1;\n                let dateFormatDate = parseInt(dateFormat.getDate(), 10) + 1;\n                //gets last day of the month\n                let dt = new Date(\n                    dateFormat.getFullYear(),\n                    dateFormat.getMonth() + 1,\n                    0\n                );\n                let dtMonth = parseInt(dt.getMonth(), 10) +1;\n                let dtDate = parseInt(dt.getDate(), 10) +1;\n                //console.log(\"date \"+ dateFormatDate+\"-\"+dateFormatMonth +\" -X- \"+ dtDate+\"-\"+dtMonth);\n                //console.log(\"date \"+ dateFormatDate+\"-\"+dateFormatMonth +\" -X- \"+ currentDate+\"-\"+currentMonth);\n                // check if the ith date is l//TODO sorting by month (safe-side)ast date of the month or if it is the current month's date which is before the last day of month\n                return (\n                    (dateFormatMonth == dtMonth && dateFormatDate == dtDate) ||\n                    (dateFormatMonth == currentMonth && dateFormatDate == currentDate)\n                );\n            })\n            .map( (i) => {\n     //            console.log(\"cases \" + i.Cases+\" on date \" +i['Date']);\n                setProvince(i.Province);\n                let month = i[\"Date\"].substr(5, 2);\n                let date = new Date(i[\"Date\"]);\n                console.log(\"date:\" + date);\n                let cases = {\n                    confirmed : parseInt(i.Confirmed, 10),\n                    active : parseInt(i.Active, 10),\n                    deaths : parseInt(i.Deaths, 10)\n                }\n                setConfirmedCasesData(data =>data.concat(cases.confirmed));\n                setActiveCasesData(data =>data.concat(cases.active));\n                setDeathData(data =>data.concat(cases.deaths));\n\n                setLastDate(i[\"Date\"]);\n                return {\n                    country: i.Country,\n                    province: i.Province,\n                    date: date,\n                    confirmed: cases.confirmed,\n                    active: cases.active,\n                    deaths: cases.deaths,\n                    lastDate: lastDate\n                };\n            });\n        console.log(li);\n        let active = [].concat(li.map(i => i.active));\n        let confirmed = [].concat(li.map(i => i.confirmed));\n        let deaths = [].concat(li.map(i => i.deaths));\n        let labels = [].concat(li.map(i => {\n            //return i.date.getDate();\n            let date=new Date(i.date);\n            let dt =\"\";\n            dt=dt.concat(date.getDate().toString());\n            dt = dt.concat(\" - \");\n            dt= dt.concat(getMonthMMM(date))\n            console.log(dt);\n            return dt;\n        }));\n        let province = [...new Set(li.map(i => {\n            if(!i.province==\"\"){\n                return i.province\n            }else{\n                return i.country\n            }\n        }))];\n        return  {\n            active: active,\n            confirmed: confirmed,\n            deaths:deaths,\n            labels:labels,\n            province:province\n        };\n    };\n\n    const loadLineChart = li => {\n        console.log(li)\n        const ctx = chartRef.current.getContext(\"2d\");\n        new Chart(ctx, {\n            type: \"bar\",\n            data: {\n                datasets: [{\n                    label: 'Active Cases',\n                    data: li[\"active\"],\n\n                },\n                    {\n                    label: 'Deaths',\n                    data: li[\"deaths\"],\n                    backgroundColor: [\n                        'rgba(255, 120, 132, 0.2)',\n                        'rgba(255, 120, 132, 0.2)',\n                        'rgba(255, 120, 132, 0.2)',\n                        'rgba(255, 120, 132, 0.2)',\n                        'rgba(255, 120, 132, 0.2)',\n\n                    ],\n                },\n                    {\n                    label: 'Confirmed Cases',\n                    data: li[\"confirmed\"],\n\n                    // Changes this dataset to become a line\n                    type: 'line'\n                }],\n                labels: li[\"labels\"]\n            },\n            options: {\n                responsive: true,\n                scales: {\n                    yAxes: [\n                        {\n                            ticks: {\n                                beginAtZero: false\n                            }\n                        }\n                    ]\n                },\n                plugins: {\n                    filler: {\n                        propagate: true\n                    }\n                }\n            }\n        });\n    };\n    return (\n        <div>\n            <p>\n                <span style={{color: \"darkcyan\"}}>Last updated on:</span>\n                {lastDate}\n            </p>\n            <canvas\n                id={\"myChart\"}\n                ref={chartRef}\n                style={{width: \"100vh\", height: \"80vh\"}}\n            />\n            <div>\n\n            </div>\n        </div>\n    );\n};\nexport default CountryChart;\n//\n/**\n * @param : Date Object\n * @return string month (MMM/ month)\n * To get month name from Date object\n * */\nconst getMonthMMM = (obj) =>{\n  let x = obj.getMonth();\n  const month = [\"January\", \"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"]\n  const mon = [\"Jan\", \"Feb\",\"Mar\",\"Apr\",\"May\",\"June\",\"July\",\"Aug\",\"Sept\",\"Oct\",\"Nov\",\"Dec\"]\n  return mon[x];\n};","import React, {useEffect, useState} from \"react\";\nimport Chart from \"chart.js\";\n\nconst ProvinceChart = (props) => {\n    const [lastDate, setLastDate] = useState(\"\");\n    const [confirmedCasesData, setConfirmedCasesData] = useState([]);\n    const [activeCasesData, setActiveCasesData] = useState([]);\n    const [deathData, setDeathData] = useState([]);\n    const [provinceData, setProvinceData] = useState([]);\n\nconsole.error(\"Province.chart....\")\n    console.log(props.province);\n    console.log(props.data);\n    const chartRef = React.createRef();\n    useEffect(() => {\n\n       let li = getDataset();\n       // console.log(JSON.stringify(li));\n        loadLineChart(li);\n    }, [props]);\n\n    const getDataset = () =>{\n        const li = props.data\n            .filter(i => {\n                //gets today's date and month\n\n                const today = new Date();\n                let currentMonth = parseInt(today.getMonth(), 10) + 1;\n                let currentDate = parseInt(today.getDate(), 10) - 1;\n                //gets ith date's month and date\n                const dateFormat = new Date(i[\"Date\"]);\n                let dateFormatMonth = parseInt(dateFormat.getMonth(), 10) + 1;\n                let dateFormatDate = parseInt(dateFormat.getDate(), 10) + 1;\n                //gets last day of the month\n                let dt = new Date(\n                    dateFormat.getFullYear(),\n                    dateFormat.getMonth() + 1,\n                    0\n                );\n                let dtMonth = parseInt(dt.getMonth(), 10) +1;\n                let dtDate = parseInt(dt.getDate(), 10) +1;\n                //console.log(\"date \"+ dateFormatDate+\"-\"+dateFormatMonth +\" -X- \"+ dtDate+\"-\"+dtMonth);\n                //console.log(\"date \"+ dateFormatDate+\"-\"+dateFormatMonth +\" -X- \"+ currentDate+\"-\"+currentMonth);\n                // check if the ith date is l//TODO sorting by month (safe-side)ast date of the month or if it is the current month's date which is before the last day of month\n                return (\n                    (dateFormatMonth == dtMonth && dateFormatDate == dtDate) ||\n                    (dateFormatMonth == currentMonth && dateFormatDate == currentDate)\n                );\n            })\n            .map( (i) => {\n                console.log(\"cases \" + i.Cases+\" on date \" +i['Date']);\n              /*  setProvince(i.Province);*/\n                let month = i[\"Date\"].substr(5, 2);\n                let date = new Date(i[\"Date\"]);\n                console.log(\"date:\" + date);\n                let cases = {\n                    confirmed : parseInt(i.Confirmed, 10),\n                    active : parseInt(i.Active, 10),\n                    deaths : parseInt(i.Deaths, 10)\n                }\n                setConfirmedCasesData(data =>data.concat(cases.confirmed));\n                setActiveCasesData(data =>data.concat(cases.active));\n                setDeathData(data =>data.concat(cases.deaths));\n\n                setLastDate(i[\"Date\"]);\n                return {\n                    country: i.Country,\n                    date: date,\n                    confirmed: cases.confirmed,\n                    active: cases.active,\n                    deaths: cases.deaths,\n                    lastDate: lastDate\n                };\n            });\n        console.log(li);\n        let active = [].concat(li.map(i => i.active));\n        let confirmed = [].concat(li.map(i => i.confirmed));\n        let deaths = [].concat(li.map(i => i.deaths));\n        let labels = [].concat(li.map(i => {\n            //return i.date.getDate();\n            let date=new Date(i.date);\n            let dt =\"\";\n            dt=dt.concat(date.getDate().toString());\n            dt = dt.concat(\" - \");\n            dt= dt.concat(getMonthMMM(date))\n            console.log(dt);\n            return dt;\n        }));\n        /*let province = [...new Set(li.map(i => {\n            if(!i.province==\"\"){\n                return i.province\n            }else{\n                return i.country\n            }\n        }))];*/\n        return  {\n            active: active,\n            confirmed: confirmed,\n            deaths:deaths,\n            labels:labels,\n           /* province:province*/\n        };\n    }\n\n\n    const loadLineChart = li => {\n        console.log(li)\n        const ctx = chartRef.current.getContext(\"2d\");\n        new Chart(ctx, {\n            type: \"bar\",\n            data: {\n                datasets: [{\n                    label: 'Active Cases',\n                    data: li[\"active\"],\n\n                },\n                    {\n                        label: 'Deaths',\n                        data: li[\"deaths\"],\n                        backgroundColor: [\n                            'rgba(255, 120, 132, 0.2)',\n                            'rgba(255, 120, 132, 0.2)',\n                            'rgba(255, 120, 132, 0.2)',\n                            'rgba(255, 120, 132, 0.2)',\n                            'rgba(255, 120, 132, 0.2)',\n\n                        ],\n                    },\n                    {\n                        label: 'Confirmed Cases',\n                        data: li[\"confirmed\"],\n\n                        // Changes this dataset to become a line\n                        type: 'line'\n                    }],\n                labels: li[\"labels\"]\n            },\n            options: {\n                title: {\n                    display: true,\n                    text: props.province\n                },\n                responsive: true,\n                scales: {\n                    yAxes: [\n                        {\n                            ticks: {\n                                beginAtZero: false\n                            }\n                        }\n                    ]\n                },\n                plugins: {\n                    filler: {\n                        propagate: true\n                    }\n                }\n            }\n        });\n    };\n    return (\n        <div>\n\n            <canvas\n                id={\"myChart\"}\n                ref={chartRef}\n                style={{width: \"100vh\", height: \"80vh\"}}\n            />\n            <p>\n                <span style={{color: \"darkcyan\"}}>Last updated on:</span>\n                {lastDate}\n            </p>\n            <div>\n                <br/>\n            </div>\n        </div>\n    );\n}\nexport default ProvinceChart;\n\n/**\n * @param : Date Object\n * @return string month (MMM/ month)\n * To get month name from Date object\n * */\nconst getMonthMMM = (obj) =>{\n    let x = obj.getMonth();\n    const month = [\"January\", \"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"]\n    const mon = [\"Jan\", \"Feb\",\"Mar\",\"Apr\",\"May\",\"June\",\"July\",\"Aug\",\"Sept\",\"Oct\",\"Nov\",\"Dec\"]\n    return mon[x];\n};","import React, {useEffect, useState} from \"react\";\nimport styles from \"./CSS/CoronaInfo.module.css\";\nimport CountDisplayContainer from \"./CountDisplayContainer\";\nimport LineChartContainer from \"./LineChartContainer\";\nimport Select from '@material-ui/core/Select';\nimport CountryChart from \"./CountryChart\";\nimport ProvinceChart from \"./ProvinceChart\";\n\n//TODO Make it mobile friendly (esp. chart)\nconst CoronaInfo = () => {\n    const [globalData, setGlobalData] = useState([]);\n    const [countriesData, setCountriesData] = useState([]);\n    const [dayOneData, setDayOneData] = useState([]);\n    const [provinceList, setProvinceList] = useState([]);\n    const [countryList,setCountryList] =useState([]);\n    const [selectCountry, setSelectCountry] = React.useState({});\n\n    /*const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(null);*/\n\n    const API_summary = `https://api.covid19api.com/summary`;\n    const API_countryList = `https://api.covid19api.com/countries`;\n    var API_DayOne = `https://api.covid19api.com/dayone/country/canada/status/confirmed`;\n\n    useEffect(() => {\n        console.log(\"1 - useEffect ran... \");\n        getTotalGlobalCount();\n         getCountryList();\n    },[]);\n\n    const getTotalGlobalCount = async () => {\n        await fetch(API_summary)\n            .then(res => res.json())\n            .then(data => {\n                setGlobalData(data.Global);\n                setCountriesData(data.Countries);\n            });\n    };\n    const getCountryList = async() => {\n      await fetch(API_countryList)\n            .then(res => res.json())\n            .then(data => {\n                setCountryList(data);\n            });\n    };\n    const handleCountryChange = (event) => {\n        console.log(selectCountry);\n        //console.log(event.target);\n        onCountrySelect(event.target.value).then((res) => {\n            setSelectCountry(res[0]);\n            getCountByDayOne(res[0].Slug);\n        });\n    };\n    const onCountrySelect = async (c) => {\n     //   console.log(c);\n        const selectedObj = countriesData.filter((i)=>{\n           // console.log(i.CountryCode +\"===\"+  c);\n            return i.CountryCode ==  c ;\n        });\n       // console.log(selectedObj);\n       // console.log(\"-  selected country\");\n        return selectedObj;\n    }\n\n    const getCountByDayOne = async (val) => {\n        //fetchData()\n        //TODO error check for val\n        API_DayOne = `https://api.covid19api.com/dayone/country/${val}`;\n     //   console.log(API_DayOne)\n        let data = await fetch(API_DayOne)\n            .then(res => res.json());\n        setDayOneData( data);\n      //  console.log(data);\n        // if data is empty ELSE if province is empty\n        if(JSON.stringify(data) === '[]' ){\n            console.log(\"province emtpty\")\n            //  TODO\n            //console.log(data);\n        }else {\n            if(!(data[0].Province === \"\")){\n                const list = getProvinceList(data);\n                setProvinceList(list);\n            }\n        }\n    };\n    /**\n     * get List of names of province\n     */\n    const getProvinceList = (data) => {\n        let unique = [...new Set(data.map(item => {\n            if(item.Province == \"\"){\n                return item.Country;\n            }else{\n                return item.Province;\n            }\n\n        }))];\n        return unique;\n    };\n    /*const getProvinceList = (data) => {\n     // const unique = [...new Set(array.map(item => item.age))];\n      const uniqueProvinces = [...new Set(data.map(item => item.Province))];\n  };*/\n    const countryOptions = countryList.sort(function(a, b){\n        if(a.Country < b.Country) { return -1; }\n        if(a.Country > b.Country) { return 1; }\n        return 0;\n    }).map(obj =>\n            <option value={obj.ISO2} label={obj.Country} >{obj.Country}</option>\n        )\n\n    const allProvinceCharts = provinceList.sort(function(a, b){\n        if(a < b) { return -1; }\n        if(a > b) { return 1; }\n        return 0;\n    }).map(obj => <ProvinceChart  province={obj} data={dayOneData.filter(i => { return i.Province === obj})} />);\nlet flag = (provinceList === \"[]\");\n    console.log(\"flag : \"+flag);\n    return (\n        <div className={styles.newsInfo} id=\"newsInfo\" onLoad={() => getTotalGlobalCount()}>\n            <h3 className=\"text-white-50 align-content-center justify-content-around font-weight-bolder\">\n                News Book\n            </h3>\n\n            <h1><b>C<i className=\"fas fa-virus fa-x\" style={{color:\"darkcyan\"}}></i>VID-19</b></h1>\n\n            <CountDisplayContainer\n                heading={\"Total\"}\n                data0={globalData.TotalConfirmed}\n                data1={globalData.TotalRecovered}\n                data2={globalData.TotalDeaths}\n                labels={[\"Cases\", \"Recovered\", \"Death\"]}\n            />\n            <hr style={{width: \"80%\"}}/>\n\n            <div >\n                <label id=\"demo-simple-select-label\">Select Country</label>\n                <Select\n                    id=\"demo-simple-select\"\n                    value={selectCountry.Country}\n                    onChange={(val)=>handleCountryChange(val)}\n                >\n                    {countryOptions}\n\n                </Select>\n\n                {!(JSON.stringify(selectCountry) === '{}') &&\n                    <CountDisplayContainer\n                    heading={`${selectCountry.Country}`}\n                    data0={selectCountry.TotalConfirmed}\n                    data1={selectCountry.TotalRecovered}\n                    data2={selectCountry.TotalDeaths}\n                    labels={[\"Cases\", \"Recovered\", \"Death\"]}\n                    />\n                }\n                {/*<LineChartContainer data={dayOneData} provinceList={provinceList}/>*/}\n                { flag && <CountryChart data={dayOneData} provinceList={provinceList}/>}\n                {!flag && allProvinceCharts}\n            </div>\n            <p>Source: https://www.covid19api.com/</p>\n        </div>\n    );\n};\nexport default CoronaInfo;\n","import React from 'react';\n\nconst Home = () => (\n    <div>\n        <h1 style={{color:\"aliceblue\",fontFamily:\"fantasy\"}}>Welcome to the Pooja's Website!</h1>\n    </div>\n)\n\nexport default Home;","import React, {useEffect, useState} from 'react';\nimport FruitsAndVegView from \"./FruitsAndVegView\";\nimport styles from \"./CSS/FruitsAndVeg.module.css\";\n\nconst FruitsAndVeg = () => {\n    const [information, setInformation] = useState(\"\");\n    const [search, setSearch] = useState(\"\");\n    const [query, setQuery] = useState(\"Mango\");\n    //const API_Request = ;\n    const APP_ID = \"732a00fc\";\n    const APP_KEY = \"4a3ea286fc60d80a22746e51a1befaaa\";\n\n\n    useEffect(() => {\n        getInfo();\n        console.log(\"use Effect run\");\n    }, [query]);\n\n    const getInfo = async () => {\n        console.log(\"query : \" + query);\n        //const response = await\n        /*fetch(\"http://tropicalfruitandveg.com/api/tfvjsonapi.php?tfvitem=Mango\",*/\n        // const myurl = new URL('http://tropicalfruitandveg.com/api/tfvjsonapi.php?tfvitem=mango');\n        const myurl = new URL('https://api.npms.io/v2/search?q=react');\n        const params = {tfvitem: query};\n        myurl.search = new URLSearchParams(params).toString();\n\n        /*const response = await fetch(\"http://tropicalfruitandveg.com/api/tfvjsonapi.php?tfvitem=\"+query, {\n            mode: \"no-cors\",\n            headers: {\n                \"Access-Control-Allow-Origin\" : \"*\",\n                \"Access-Control-Allow-Credentials\" : false\n            }\n        });\n        const data = await response.json();\n        console.log(\"data : \" +data);*/\n\n        // GET request using fetch with error handling\n        fetch(\"https://api.npms.io/v2/search?q=react\")\n            .then(async response => {\n                const data = await parseJSON(response);\n\n                // check for error response\n                if (!response.ok) {\n                    // get error message from body or default to response statusText\n                    const error = (data && data.message) || response.statusText;\n                    console.log(\"NOT OKAY\");\n                    return Promise.reject(error);\n                }\n                console.log(\"OKAY\");\n                console.log(data.results[0].package.description);\n            })\n            .catch(error => {\n                console.error('There was an error!', error);\n            });\n\n        // return setInformation(data);\n// empty dependency array means this effect will only run once (like componentDidMount in classes)\n    };\n    const parseJSON = (response) => {\n        return response.text().then(function(text) {\n            return text ? JSON.parse(text) : []\n        });\n    };\n    const updateSearch = e => {\n        setSearch(e.target.value);\n    };\n    const getSearch = e => {\n        e.preventDefault();\n        setQuery(search);\n        setSearch('');\n    };\n    return (\n\n        <div className='newsInfo' id=\"newsInfo\">\n            <h1 className=\"text-white-50\">Know your Tropical Fruits and vegetables</h1>\n            <form className={styles.searchForm} onSubmit={getSearch}>\n                <input\n                    className={styles.searchBar}\n                    type='text'\n                    value={search}\n                    onChange={updateSearch}\n                />\n                <button\n                    className={styles.searchButton}\n                    type='submit'\n                >\n                    Search\n                </button>\n            </form>\n            <div className={styles.recipes} id=\"demo\">\n                <p>{console.log(\"information  is : \"+information)}</p>\n            </div>\n        </div>\n\n    );\n};\nexport default FruitsAndVeg;\n/* <FruitsAndVegView\n                       tfvname={i.tfvname}\n                       botname={i.botname}\n                       othname={i.othname}\n                       imageurl={i.imageurl}\n                       description={i.discription}\n                       uses={i.uses}\n                       propagation={i.propogation}\n                       soil={i.soil}\n                       climate={i.climate}\n                       health={i.health}\n                       />\n                   */","import React, { useState, useEffect } from 'react';\nimport ProgressComponent from '@material-ui/core/CircularProgress';\n\nfunction JitsiMeetComponent() {\nconst [loading, setLoading] = useState(true);\nconst containerStyle = {\n    width: '800px',\n    height: '400px',\n};\n\nconst jitsiContainerStyle = {\n    display: (loading ? 'none' : 'block'),\n    width: '100%',\n    height: '100%',\n}\n\nfunction startConference() {\n    try {\n        //const domain = 'meet.jit.si';\n        const domain = 'localhost:8080';\n        const options = {\n            roomName: 'Poojac_Meeting',\n            height: 500,\n            parentNode: document.getElementById('jitsi-container'),\n            interfaceConfigOverwrite: {\n                filmStripOnly: false,\n                SHOW_JITSI_WATERMARK: false,\n                SHOW_WATERMARK_FOR_GUESTS: false,\n                TOOLBAR_BUTTONS: [\n                    'microphone', 'camera', 'closedcaptions', 'desktop', 'fullscreen',\n                    'fodeviceselection', 'hangup', 'profile', 'chat', 'recording',\n                     'etherpad', 'sharedvideo', 'settings', 'raisehand',\n                    'videoquality', 'filmstrip', 'invite', 'feedback', 'stats', 'shortcuts',\n                    'tileview', 'videobackgroundblur', 'download', 'help', 'mute-everyone',\n                    'e2ee', 'security'\n                ],\n                RANDOM_AVATAR_URL_PREFIX: true,\n                RANDOM_AVATAR_URL_SUFFIX: false,\n                FILM_STRIP_MAX_HEIGHT: 200,\n                MOBILE_APP_PROMO: false,\n                DEFAULT_BACKGROUND: '#ebe134'\n            },\n            configOverwrite: {\n                disableSimulcast: false,\n                transcribingEnabled: true,\n            },\n            jwt: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IlBvb2phIENob2xlcmEiLCJpYXQiOjE1MTYyMzkwMjJ9.E_g2EVeSH-MgKGDcngvx8njWVQMmq5P1F9mmAaWWnho',\n\n        };\n        const api = new window.JitsiMeetExternalAPI(domain, options);\n        api.addEventListener('videoConferenceJoined', () => {\n            console.log('Local User Joined');\n            setLoading(false);\n            api.executeCommand('displayName', 'Pooja Cholera');\n            api.executeCommand('password', 'pooja@1234');\n            api.executeCommand('subject', 'Say Hi to Pooja here');\n        });\n    } catch (error) {\n        console.error('Failed to load Jitsi API', error);\n    }\n}\n\nuseEffect(() => {\n    // verify the JitsiMeetExternalAPI constructor is added to the global..\n    if (window.JitsiMeetExternalAPI) startConference();\n    else alert('Jitsi Meet API script not loaded');\n}, []);\n\nreturn (\n    <div\n        style={containerStyle}\n    >\n        <h1>Jitsi meet</h1>\n        {loading && <ProgressComponent />}\n        <div\n            id=\"jitsi-container\"\n            style={jitsiContainerStyle}\n        />\n        <footer>\n            Using Jitsi\n        </footer>\n    </div>\n);\n}\nexport default JitsiMeetComponent;\n","import React, {useEffect, useState} from 'react';\nimport './CSS/App.css';\nimport Navmenu from './navmenu';\nimport RecipeView from \"./RecipeView\";\nimport { Switch } from \"react-router-dom\";\nimport CoronaInfo from './CoronaInfo';\nimport { Route } from 'react-router';\nimport Home from \"./home\";\nimport FruitsAndVeg from \"./FruitsAndVeg\";\nimport ZoomVideoChat from \"./ZoomVideoChat\";\nimport JitsiMeetComponent from \"./JitsiMeetComponent\";\nimport WhereByComponent from \"./WhereByComponent\";\n\nconst App = () => {\n    return (\n        <div className='App'>\n            <header>\n                <Navmenu/>\n            </header>\n                <Switch>\n                    <Route exact path='/' component={Home} />\n                    <Route path='/Recipes' component={RecipeView}/>\n                    <Route path='/CoronaInfo' component={CoronaInfo}/>\n                    <Route path='/VideoChat' component={JitsiMeetComponent}/>\n                    {/*<Route path='/WhereByVideoChat' component={WhereByComponent}/>*/}\n                    {/*<Route path='/ZoomVideoChat' component={ZoomVideoChat}/>*/}\n                    <Route path='/FruitsAndVeg' component={FruitsAndVeg}/>\n\n                </Switch>\n        </div>\n    );\n};\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <App />\n    </BrowserRouter>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}